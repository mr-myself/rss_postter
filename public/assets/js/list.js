// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$(function() {
  var ListCollection, ListModel, ListView, ListsView, _ref, _ref1, _ref2, _ref3;
  ListModel = (function(_super) {
    __extends(ListModel, _super);

    function ListModel() {
      _ref = ListModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return ListModel;

  })(Backbone.Model);
  ListCollection = (function(_super) {
    __extends(ListCollection, _super);

    function ListCollection() {
      _ref1 = ListCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ListCollection.prototype.model = ListModel;

    ListCollection.prototype.url = "/api/list";

    return ListCollection;

  })(Backbone.Collection);
  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      _ref2 = ListView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ListView.prototype.tagName = "tr";

    ListView.prototype.template = _.template($("#js-list-template").html());

    ListView.prototype.events = {
      "click .js-delete": "delete"
    };

    ListView.prototype.initialize = function() {
      this.listenTo(this.model, "add", this.render);
      return this.listenTo(this.model, "destroy", this.render);
    };

    ListView.prototype["delete"] = function() {
      return this.model.destroy({
        wait: true,
        merge: true
      });
    };

    ListView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return ListView;

  })(Backbone.View);
  ListsView = (function(_super) {
    __extends(ListsView, _super);

    function ListsView() {
      _ref3 = ListsView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    ListsView.prototype.el = "#js-list";

    ListsView.prototype.initialize = function() {
      this.listenTo(this.collection, "add", this.add);
      this.listenTo(this.collection, "destroy", this.remove);
      return this.collection.fetch();
    };

    ListsView.prototype.add = function(list) {
      var view;
      view = new ListView({
        model: list
      });
      return this.$el.append(view.render().el);
    };

    return ListsView;

  })(Backbone.View);
  return new ListsView({
    collection: new ListCollection
  });
});
